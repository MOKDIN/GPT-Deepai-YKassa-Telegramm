# -*- coding: utf-8 -*-

import asyncio
from typing import Optional
import dp as dp
import openai
import logging
import config
import markups as nav
from aiogram import Bot, Dispatcher, types, executor
from config import OPENAI_API_KEY, TELEGRAM_BOT_TOKEN
from io import BytesIO
import aiohttp
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from aiogram.dispatcher.handler import SkipHandler
from html import escape
import hashlib
import time
from aiohttp import web
from aiogram.types import ContentTypes
import pytesseract
from PIL import Image, ImageEnhance
from aiogram.types import InputFile
import os
from pydub import AudioSegment
import speech_recognition as sr
import json
from yookassa import Configuration, Payment
from yookassa import Refund
import uuid
import sqlite3
import datetime
from db import Database
import glob
import schedule
from aiogram import types
from io import BytesIO
import aiohttp
from aiogram.dispatcher import Dispatcher
from translate import Translator
import sys






translator = Translator(from_lang='ru', to_lang='en')

db_file = "database.db"  # –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É SQLite –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database('database.db')

Configuration.account_id = config.SHOP_ID
Configuration.secret_key = config.SHOP_API_TOKEN

# Set up the OpenAI API key
openai.api_key = OPENAI_API_KEY
DEEP_AI_API_KEY = config.DEEP_AI_API_KEY
logging.basicConfig(level=logging.INFO)

# Set up the Telegram bot
bot = Bot(token=TELEGRAM_BOT_TOKEN, parse_mode=types.ParseMode.HTML)
dp = Dispatcher(bot)
CHANNEL_ID = ""
NOTSUB_MESSAGE = "–î–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—É –±–æ—Ç–∞ –ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª!"
db = Database('database.db')


def check_sub_channel(chat_member):
    print(chat_member['status'])
    if chat_member['status'] != 'left':
        return True
    else:
        return False


async def check_and_update_requests(user_id, text_request=True):
    user_data = db.get_user(user_id)
    text_requests_str = str(user_data['text_requests'])
    image_requests_str = str(user_data['image_requests'])

    text_requests = int(text_requests_str.split('/')[0]) if '/' in text_requests_str else 0
    image_requests = int(image_requests_str.split('/')[0]) if '/' in image_requests_str else 0

    if text_request:
        if user_data['subscription_type'] == 'standard' and text_requests >= 700:
            return False
        if user_data['subscription_type'] == 'premium' and text_requests >= 4000:
            return False
        text_requests += 1
    else:
        if user_data['subscription_type'] == 'standard' and image_requests >= 5:
            return False
        if user_data['subscription_type'] == 'premium' and image_requests >= 100:
            return False
        image_requests += 1

    db.update_requests(user_id, f"{text_requests}/{get_text_requests_limit(user_data)}",
                       f"{image_requests}/{get_image_requests_limit(user_data)}")
    return True


def get_text_requests_limit(user_data):
    subscription_type = user_data['subscription_type']
    if subscription_type == 'premium':
        return 4000
    else:
        return 700


def get_image_requests_limit(user_data):
    subscription_type = user_data['subscription_type']
    if subscription_type == 'premium':
        return 100
    else:
        return 5


@dp.message_handler(commands=['profile'])
async def profile_command(message: types.Message):
    user_id = message.from_user.id
    user_data = db.get_user(user_id)

    if user_data:
        nickname = user_data['nickname']
        subscription_type = user_data['subscription_type']
        text_requests = user_data['text_requests']
        image_requests = user_data['image_requests']

        profile_text = f"üë§ –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:\n\n" \
                       f"üÜî ID: {user_id}\n" \
                       f"üë§ –ù–∏–∫–Ω–µ–π–º: {nickname}\n" \
                       f"üìå –¢–∏–ø –ø–æ–¥–ø–∏—Å–∫–∏: {subscription_type}\n" \
                       f"üìù –¢–µ–∫—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã: {text_requests}\n" \
                       f"üñºÔ∏è –ó–∞–ø—Ä–æ—Å—ã –Ω–∞ –∫–∞—Ä—Ç–∏–Ω–∫–∏: {image_requests}"

        await bot.send_message(chat_id=user_id, text=profile_text)
    else:
        await bot.send_message(chat_id=user_id, text="‚ö†Ô∏è –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")



@dp.message_handler(commands=['set_premium'])
async def set_premium_command(message: types.Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
    current_time = datetime.datetime.now()

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ 30 –¥–Ω–µ–π –∫ —Ç–µ–∫—É—â–µ–º—É –≤—Ä–µ–º–µ–Ω–∏
    time_sub = current_time + datetime.timedelta(days=30)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    if db.user_exists(user_id):
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ "premium"
        db.update_subscription_type(user_id, "premium")

        # –û–±–Ω–æ–≤–ª—è–µ–º –ª–∏–º–∏—Ç—ã –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        db.update_requests_limit(user_id, text_requests_limit=2000, image_requests_limit=50)

        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –º–µ—Å—è—Ü
        subscription_expiry = datetime.datetime.now() + datetime.timedelta(days=30)
        db.update_subscription_time_sub(user_id, subscription_expiry)

        await message.reply("–°—Ç–∞—Ç—É—Å 'premium' —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.reply("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")


@dp.callback_query_handler(lambda call: call.data == 'pay_subscription')
async def process_callback_button1(call: types.CallbackQuery):
    await bot.answer_callback_query(call.id)
    await send_invoice(call.message.chat.id)


async def send_invoice(chat_id):
    title = "–ü—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ 1 –º–µ—Å—è—Ü"
    description = "–ü–æ–ª—É—á–∏—Ç–µ –¥–æ—Å—Ç—É–ø –∫ —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—è–º –±–æ—Ç–∞: 2000 –∑–∞–ø—Ä–æ—Å–æ–≤  –∏ 50 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ –º–µ—Å—è—Ü."
    payload = "subscription_payload"
    provider_token = ""
    start_parameter = "subscription"
    currency = "RUB"
    price = 300 * 100  # –£–º–Ω–æ–∂—å—Ç–µ –Ω–∞ 100, —á—Ç–æ–±—ã –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ –∫–æ–ø–µ–π–∫–∏
    prices = [types.LabeledPrice(label=title, amount=price)]

    await bot.send_invoice(
        chat_id=chat_id,
        title=title,
        description=description,
        payload=payload,
        provider_token=provider_token,
        start_parameter=start_parameter,
        currency=currency,
        prices=prices,
    )


@dp.message_handler(commands=['premium'])
async def premium_command(message: types.Message):
    text = "–ë–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –µ–∂–µ–º–µ—Å—è—á–Ω–æ –±–µ—Å–ø–ª–∞—Ç–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –¥–æ 700 –∑–∞–ø—Ä–æ—Å–æ–≤ –∫ Open AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏  –∏ —Å–æ–∑–¥–∞–≤–∞—Ç—å 5 –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π . –¢–∞–∫–æ–π –ª–∏–º–∏—Ç –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Å–∫–æ—Ä–æ—Å—Ç—å –∏ –∫–∞—á–µ—Å—Ç–≤–æ —Ä–∞–±–æ—Ç—ã.\n\n–ù—É–∂–Ω–æ –±–æ–ª—å—à–µ? –ü–æ–¥–∫–ª—é—á–∏—Ç–µ –ø—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –º–µ—Å—è—Ü –∑–∞ 300 —Ä—É–±.\n\n–ü—Ä–µ–º–∏—É–º-–ø–æ–¥–ø–∏—Å–∫–∞ –≤–∫–ª—é—á–∞–µ—Ç:\n‚úÖ –¥–æ 4000 –∑–∞–ø—Ä–æ—Å–æ–≤ ;\n‚úÖ –¥–æ 100 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ —Å–æ–∑–¥–∞–Ω–∏–µ –∫–∞—Ä—Ç–∏–Ω–æ–∫ –≤ –º–µ—Å—è—Ü;\n‚úÖ –Ω–µ—Ç –ø–∞—É–∑—ã –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏;\n‚úÖ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ –≤—ã—Å–æ–∫–æ–π —Å–∫–æ—Ä–æ—Å—Ç–∏ —Ä–∞–±–æ—Ç—ã, –¥–∞–∂–µ –≤ –ø–µ—Ä–∏–æ–¥ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–π –Ω–∞–≥—Ä—É–∑–∫–∏;\n‚úÖ –±–æ–ª–µ–µ 1000 –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ (—Å–∫–æ—Ä–æ)"
    keyboard = types.InlineKeyboardMarkup(row_width=1)
    button1 = types.InlineKeyboardButton(text="–ö–∞–Ω–∞–ª –ø–æ–¥–ø–∏—Å–∫–∏", url="https://t.me/openaichn")
    button2 = types.InlineKeyboardButton(text="–û–ø–ª–∞—Ç–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É", callback_data="pay_subscription")
    button3 = types.InlineKeyboardButton(text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π", url="https://t.me/nikitinno")
    keyboard.add(button1, button2, button3)
    await bot.send_message(chat_id=message.chat.id, text=text, reply_markup=keyboard)


@dp.pre_checkout_query_handler(lambda query: True)
async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
    await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)


@dp.message_handler(content_types=ContentTypes.SUCCESSFUL_PAYMENT)
async def process_successful_payment(message: types.Message):
    user_id = message.from_user.id
    # –û–±–Ω–æ–≤–∏—Ç–µ —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –≤–∞—à–µ–π –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    db.set_subscription(user_id)  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç–∫–∑–µ–º–ø–ª—è—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—ã–∑–æ–≤–∞ —Ñ—É–Ω–∫—Ü–∏–∏ set_subscription()
    await bot.send_message(chat_id=message.chat.id, text="–°–ø–∞—Å–∏–±–æ –∑–∞ –æ–ø–ª–∞—Ç—É! –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞.")


@dp.message_handler(content_types=['voice'])
async def handle_voice(message: types.Message):
    voice_file = await bot.download_file_by_id(message.voice.file_id)
    ogg_file_path = f"voice_{message.voice.file_id}.ogg"
    wav_file_path = f"voice_{message.voice.file_id}.wav"

    with open(ogg_file_path, 'wb') as f:
        f.write(voice_file.read())

    convert_ogg_to_wav(ogg_file_path, wav_file_path)

    recognized_text = transcribe_audio(wav_file_path)

    if await check_and_update_requests(message.from_user.id):
        # –ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç GPT-3.5-turbo API
        gpt_response = await ai(recognized_text, message.from_user.id)
        await message.reply(gpt_response)
    else:
        await message.reply("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤.")

    # –£–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ—Å–ª–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
    os.remove(ogg_file_path)
    os.remove(wav_file_path)


def transcribe_audio(file_path):
    recognizer = sr.Recognizer()
    with sr.AudioFile(file_path) as source:
        audio = recognizer.record(source)

    try:
        text = recognizer.recognize_google(audio, language='ru-RU')
        return text
    except sr.UnknownValueError:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –∞—É–¥–∏–æ"
    except sr.RequestError as e:
        return f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–∏—Å–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è —Ä–µ—á–∏: {e}"


@dp.message_handler(content_types=['voice'])
async def handle_voice(message: types.Message):
    voice_file = await bot.download_file_by_id(message.voice.file_id)
    file_path = f"voice_{message.voice.file_id}.ogg"

    with open(file_path, 'wb') as f:
        f.write(voice_file.read())

    # –ó–¥–µ—Å—å –≤–∞–º –Ω—É–∂–Ω–æ –±—É–¥–µ—Ç –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞—Ç—å —Ñ–∞–π–ª OGG –≤ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, WAV.

    recognized_text = transcribe_audio(file_path)
    await message.reply(recognized_text)


from pydub import AudioSegment


def convert_ogg_to_wav(ogg_file_path, wav_file_path):
    audio = AudioSegment.from_ogg(ogg_file_path)
    audio.export(wav_file_path, format="wav")


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
def remove_old_voice_files():
    voice_files = glob.glob('voice_*.ogg')  # –ó–∞–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –Ω–∞ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Ñ–∞–π–ª–∞–º–∏
    threshold = datetime.datetime.now() - datetime.timedelta(days=2)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Ä–æ–≥

    for file in voice_files:
        created_time = datetime.datetime.fromtimestamp(os.path.getctime(file))
        if created_time < threshold:
            os.remove(file)


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤ –∞—É–¥–∏–æ
def remove_old_audio_files():
    audio_files = glob.glob('voice_*.wav')  # –ó–∞–º–µ–Ω–∏—Ç–µ –ø—É—Ç—å –Ω–∞ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å –∞—É–¥–∏–æ —Ñ–∞–π–ª–∞–º–∏
    threshold = datetime.datetime.now() - datetime.timedelta(days=2)  # –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω–æ–π –ø–æ—Ä–æ–≥

    for file in audio_files:
        created_time = datetime.datetime.fromtimestamp(os.path.getctime(file))
        if created_time < threshold:
            os.remove(file)


# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–π –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ —É–¥–∞–ª–µ–Ω–∏—è —Å—Ç–∞—Ä—ã—Ö —Ñ–∞–π–ª–æ–≤
schedule.every(2).days.at("03:00").do(remove_old_voice_files)  # –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Ä–∞–∑ –≤ 2 –¥–Ω—è
schedule.every(2).days.at("03:00").do(remove_old_audio_files)  # –£–¥–∞–ª–µ–Ω–∏–µ –∞—É–¥–∏–æ —Ñ–∞–π–ª–æ–≤ —Ä–∞–∑ –≤ 2 –¥–Ω—è


def preprocess_image(image):
    # –ò–∑–º–µ–Ω–∏—Ç—å —Ä–∞–∑–º–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
    image = image.resize((image.width * 2, image.height * 2), Image.BICUBIC)

    # –£–≤–µ–ª–∏—á–∏—Ç—å –∫–æ–Ω—Ç—Ä–∞—Å—Ç
    enhancer = ImageEnhance.Contrast(image)
    image = enhancer.enhance(2)

    # –ü–æ–≤—ã—Å–∏—Ç—å —è—Ä–∫–æ—Å—Ç—å
    enhancer = ImageEnhance.Brightness(image)
    image = enhancer.enhance(1.2)

    return image


def recognize_text(image_data):
    with Image.open(BytesIO(image_data)) as image:
        image = preprocess_image(image)
        recognized_text = pytesseract.image_to_string(image, lang='rus')
    return recognized_text


@dp.message_handler(content_types=types.ContentType.PHOTO)
async def handle_photos(message: types.Message):
    image_file_id = message.photo[-1].file_id
    image_file = await bot.download_file_by_id(image_file_id)

    user_data = db.get_user(message.from_user.id)
    text_requests_str = user_data["text_requests"]
    text_requests = int(text_requests_str.split('/')[0]) + 1 if '/' in text_requests_str else 0

    db.update_requests(message.from_user.id, f"{text_requests}/{get_text_requests_limit(user_data)}", user_data["image_requests"])

    recognized_text = recognize_text(image_file.read())
    await bot.send_message(message.chat.id, recognized_text)

@dp.message_handler(commands=['channel'])
async def group(message: types.Message):
    # –°–æ–∑–¥–∞–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ –≥—Ä—É–ø–ø—É –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    group_link = ""
    group_image = ""  # –ó–∞–º–µ–Ω–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É

    # –°–æ–∑–¥–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –Ω–∞ –≥—Ä—É–ø–ø—É
    button = InlineKeyboardButton(text="–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", url=group_link)
    keyboard = InlineKeyboardMarkup().add(button)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–∞—Ä—Ç–∏–Ω–∫–æ–π –∏ –∫–Ω–æ–ø–∫–æ–π –Ω–∞ –≥—Ä—É–ø–ø—É
    await bot.send_photo(chat_id=message.chat.id, photo=group_image,
                         caption="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –Ω–∞ –∫–∞–Ω–∞–ª", reply_markup=keyboard)




# Define the help command handler
@dp.message_handler(commands=['help'])
async def help(message: types.Message):
    help_text = "ü§ñ –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç OpenAI –Ω–∞ –±–∞–∑–µ –º–æ–¥–µ–ª–∏ 3.5 Turbo. –ß–µ–º —è –º–æ–≥—É –ø–æ–º–æ—á—å?\n\n" \
                "üåü –í–æ—Ç –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å:\n" \
                "/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å–æ –º–Ω–æ–π\n" \
                "/help - –ü–æ–ª—É—á–∏—Ç—å —Å–ø—Ä–∞–≤–∫—É\n" \
                "/weather - –£–∑–Ω–∞—Ç—å –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã\n" \
                "/news - –ü–æ–ª—É—á–∏—Ç—å –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏\n" \
                "/define - –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∑–Ω–∞—á–µ–Ω–∏—è —Å–ª–æ–≤–∞\n" \
                "/joke - –†–∞—Å—Å–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—É—é —à—É—Ç–∫—É\n" \
                "/fact - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π —Ñ–∞–∫—Ç\n" \
                "/quote - –í—ã–≤–µ—Å—Ç–∏ —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É\n" \
                "/music - –ù–∞–π—Ç–∏ –ø–µ—Å–Ω—é –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é\n" \
                "/movie - –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ñ–∏–ª—å–º–µ\n\n" \
                "/generate_image - –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π\n\n"\
                "‚ú® –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ –∏–∑ –∫–æ–º–∞–Ω–¥, –∫–æ—Ç–æ—Ä—ã–µ —è –º–æ–≥—É –≤—ã–ø–æ–ª–Ω–∏—Ç—å. –ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å –¥—Ä—É–≥–∏–µ –∑–∞–ø—Ä–æ—Å—ã, " \
                "–ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç–µ –º–Ω–µ, –∏ —è –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º."

    await bot.send_message(chat_id=message.chat.id, text=help_text)


@dp.message_handler(commands=['clear'])
async def clear_context(message: types.Message):
    # Clear the previous context
    openai.api_key = None

    # Image URL for the clear context message
    image_url = "https://drive.google.com/uc?id=1vheuk9n7xWkiAjo_vSrzTgL89CMvArIE"

    # Send a message with the image
    await bot.send_photo(chat_id=message.chat.id, photo=image_url, caption="–í–∞—à –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω.")








@dp.message_handler(commands=['start'])
async def start(message: types.Message):
    if message.chat.type == 'private':
        user_id = message.from_user.id
        nickname = message.from_user.username or message.from_user.first_name or message.from_user.last_name
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if db.user_exists(user_id):
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add_user(user_id, nickname)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

        if check_sub_channel(await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
            welcome_message = f"""üòé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nickname}!

ü§ñ –Ø - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:

‚úÖ –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
‚úÖ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –ª—é–±–æ–π
‚úÖ –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ .
‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è  (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –æ–Ω –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –¥–∏–∞–ª–æ–≥–µ).

‚ô®Ô∏è –Ø —É–∂–µ —É–º–µ—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≤–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ. 

‚ÄºÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å

üí¨ –ë–æ—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã –∏ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏! –ß—Ç–æ–±—ã –±–æ—Ç –ø–æ–Ω—è–ª, —á—Ç–æ –≤ –≥—Ä—É–ø–ø–µ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –Ω–µ–º—É, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∏–º–≤–æ–ª —Å–æ–±–∞–∫—É @, –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –∏ –ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.  –ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —É –Ω–∞—Å –≤ —á–∞—Ç–µ https://t.me/openaichnl

üòç –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –∫–∞–∫ —Å –∂–∏–≤—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –±–æ—Ç –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç—ã, –∞ —Ç–∞–∫–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ—Å–ª–µ 2021 –≥–æ–¥–∞.

‚úâÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å.

üåÖ –ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —Å /generate_image, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: /generate_image –∑–µ–ª–µ–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–∞ —Ñ–æ–Ω–µ –∑–∞–∫–∞—Ç–∞.–ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—å—Å—è –Ω–∞ –∞–Ω–≥.—è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.

üöÄ –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –±–æ—Ç–æ–º –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –ø–æ–ª—å–∑—É—é—Ç—Å—è –µ—â—ë –º–Ω–æ–≥–æ –ª—é–¥–µ–π, –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π. –ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ /premium.     v.1.10"""

            await bot.send_message(chat_id=message.chat.id, text=welcome_message, reply_markup=nav.profileKeyboard)
        else:
            await bot.send_message(message.from_user.id, NOTSUB_MESSAGE, reply_markup=nav.checkSubMenu)


@dp.message_handler()
async def start(message: types.Message):
    if message.chat.type == 'private':
        user_id = message.from_user.id
        nickname = message.from_user.username or message.from_user.first_name or message.from_user.last_name
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        if db.user_exists(user_id):
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
            db.add_user(user_id, nickname)
            print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å ID {user_id} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")

        if message.text == "–°–¢–ê–†–¢":
            await bot.send_message(message.from_user.id, f"""üòé –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {nickname}!

ü§ñ –Ø - –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç, –∫–æ—Ç–æ—Ä—ã–π —É–º–µ–µ—Ç:

‚úÖ –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç—ã
‚úÖ –ü–µ—Ä–µ–≤–æ–¥–∏—Ç—å —Å –ª—é–±–æ–≥–æ —è–∑—ã–∫–∞ –Ω–∞ –ª—é–±–æ–π
‚úÖ –ü–∏—Å–∞—Ç—å –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–¥
‚úÖ –û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã
‚úÖ –°–æ–∑–¥–∞–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–º—É –∑–∞–ø—Ä–æ—Å—É
‚úÖ –†–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç —Å–æ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ .
‚úÖ –ó–∞–ø–æ–º–∏–Ω–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç –æ–±—â–µ–Ω–∏—è  (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 50 —Å–æ–æ–±—â–µ–Ω–∏–π –æ–Ω –±—É–¥–µ—Ç —Ö—Ä–∞–Ω–∏—Ç—å –≤ –ø–µ—Ä–µ–ø–∏—Å–∫–µ –∏ –æ—Ç–≤–µ—á–∞—Ç—å –æ—Å–Ω–æ–≤—ã–≤–∞—è—Å—å –Ω–∞ –ø—Ä–µ–¥—ã–¥—É—â–µ–º –¥–∏–∞–ª–æ–≥–µ).

‚ô®Ô∏è –Ø —É–∂–µ —É–º–µ—é —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞—Ç—å –≤–∞—à–∏ –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –Ω–∞ –Ω–∏—Ö –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–º –≤–∏–¥–µ. 

‚ÄºÔ∏è –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –º–Ω–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–µ–π—á–∞—Å

üí¨ –ë–æ—Ç–∞ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã –∏ –æ–±—â–∞—Ç—å—Å—è —Å –Ω–∏–º –≤–º–µ—Å—Ç–µ —Å –¥—Ä—É–∑—å—è–º–∏! –ß—Ç–æ–±—ã –±–æ—Ç –ø–æ–Ω—è–ª, —á—Ç–æ –≤ –≥—Ä—É–ø–ø–µ –≤—ã –æ–±—Ä–∞—â–∞–µ—Ç–µ—Å—å –∫ –Ω–µ–º—É, –Ω–∞–ø–∏—à–∏—Ç–µ —Å–∏–º–≤–æ–ª —Å–æ–±–∞–∫—É @, –≤–æ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–º –æ–∫–Ω–µ –≤—ã–±–µ—Ä–∏—Ç–µ –±–æ—Ç–∞ –∏ –ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å.  –ü–æ–ø—Ä–æ–±—É–π –ø—Ä—è–º–æ —Å–µ–π—á–∞—Å —É –Ω–∞—Å –≤ —á–∞—Ç–µ https://t.me/openaichnl

üòç –í—ã –º–æ–∂–µ—Ç–µ –æ–±—â–∞—Ç—å—Å—è —Å –±–æ—Ç–æ–º, –∫–∞–∫ —Å –∂–∏–≤—ã–º —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–æ–º, –∑–∞–¥–∞–≤–∞—è –≤–æ–ø—Ä–æ—Å—ã –Ω–∞ –ª—é–±–æ–º —è–∑—ã–∫–µ. –û–±—Ä–∞—Ç–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ, —á—Ç–æ –∏–Ω–æ–≥–¥–∞ –±–æ—Ç –ø—Ä–∏–¥—É–º—ã–≤–∞–µ—Ç —Ñ–∞–∫—Ç—ã, –∞ —Ç–∞–∫–∂–µ –æ–±–ª–∞–¥–∞–µ—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω—ã–º–∏ –∑–Ω–∞–Ω–∏—è–º–∏ –æ —Å–æ–±—ã—Ç–∏—è—Ö –ø–æ—Å–ª–µ 2021 –≥–æ–¥–∞.

‚úâÔ∏è –ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç, –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ —á–∞—Ç –≤–∞—à –≤–æ–ø—Ä–æ—Å.

üåÖ –ß—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –Ω–∞—á–Ω–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å —Å /generate_image, –∞ –∑–∞—Ç–µ–º –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç. –ù–∞–ø—Ä–∏–º–µ—Ä: /generate_image –∑–µ–ª–µ–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–∞ —Ñ–æ–Ω–µ –∑–∞–∫–∞—Ç–∞. –ó–∞–ø—Ä–æ—Å—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–µ—Ä–µ–≤–æ–¥—è—Ç—Å—è –Ω–∞ –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —è–∑—ã–∫ –¥–ª—è –ª—É—á—à–µ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è.

üöÄ –ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –±–æ—Ç–æ–º –≤–º–µ—Å—Ç–µ —Å –≤–∞–º–∏ –ø–æ–ª—å–∑—É—é—Ç—Å—è –µ—â—ë –º–Ω–æ–≥–æ –ª—é–¥–µ–π, –æ–Ω –º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π. –ß—Ç–æ–±—ã —É—Å–∫–æ—Ä–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –∏ –ø–æ–ª—É—á–∏—Ç—å –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π, –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ /premium.     v.1.10""")
        elif message.text.startswith('/generate_image'):
            prompt = message.text[len('/generate_image'):].strip()
            if not prompt:
                await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /generate_image –∑–µ–ª–µ–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–∞ —Ñ–æ–Ω–µ –∑–∞–∫–∞—Ç–∞. –ù–µ –∑–∞–±—ã–≤–∞–π—Ç–µ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –Ω–µ–π—Ä–æ–Ω–Ω–æ–π —Å–µ—Ç–∏ , –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å—Å—è –Ω–∞ –∞–Ω–ª–∏–π—Å–∫–∏–π –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.")
            else:
                if not await check_and_update_requests(message.from_user.id, text_request=False):
                    await bot.send_message(chat_id=message.chat.id,
                                           text="–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π,–ø—Ä–µ–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
                else:
                    translated_prompt = translator.translate(prompt)
                    print(f"Translated prompt: {translated_prompt}")
                    image_data = await generate_image(translated_prompt)
                    if image_data:
                        await bot.send_photo(chat_id=message.chat.id, photo=image_data)
                    else:
                        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ.")
        elif check_sub_channel(await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
            if not await check_and_update_requests(message.from_user.id, text_request=True):
                await bot.send_message(chat_id=message.chat.id,
                                       text="–í—ã –ø—Ä–µ–≤—ã—Å–∏–ª–∏ –ª–∏–º–∏—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤,–ø—Ä–µ–æ–±—Ä–µ—Ç–∏—Ç–µ –ø—Ä–µ–º–∏—É–º –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
            else:
                # Use the ai function to generate a response
                ai_message = await ai(message.text, message.chat.id)

                # Send the AI's message to the user
                if ai_message:
                    await bot.send_message(chat_id=message.chat.id, text=ai_message)
        else:
            await bot.send_message(message.from_user.id, NOTSUB_MESSAGE, reply_markup=nav.checkSubMenu)


@dp.message_handler(commands=['generate_image'])
async def generate_image_command(message: types.Message):
    if check_sub_channel(await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=message.from_user.id)):
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º, –≤—ã–ø–æ–ª–Ω—è–µ–º –∫–æ–º–∞–Ω–¥—É `\generate_image`
        prompt = message.get_args()
        if not prompt:
            await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. –ù–∞–ø—Ä–∏–º–µ—Ä: /generate_image –∑–µ–ª–µ–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –Ω–∞ —Ñ–æ–Ω–µ –∑–∞–∫–∞—Ç–∞.")
            return

        negative_prompt = "deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, (mutated hands and fingers:1.4), disconnected limbs, mutation, mutated, ugly, disgusting, blurry, amputation"
        image_data = await generate_image(grid_size="1", width="", height="", negative_prompt=negative_prompt)

        if image_data:
            await bot.send_photo(chat_id=message.chat.id, photo=image_data)
        else:
            await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. ")
    else:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∫–æ–º–∞–Ω–¥—ã
        await bot.send_message(message.chat.id, "–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª.")


async def generate_image(prompt: str, grid_size: str = "1", width: str = "768", height: str = "768",
                         negative_prompt: str = "deformed, distorted, disfigured:1.3), poorly drawn, bad anatomy, wrong anatomy, extra limb, missing limb, floating limbs, (mutated hands and fingers:1.4), disconnected limbs, mutation, mutated, ugly, disgusting, blurry, amputation") -> \
Optional[BytesIO]:
    async with aiohttp.ClientSession() as session:
        async with session.post(
                "https://api.deepai.org/api/text2img",
                data={
                    "text": prompt,
                    "grid_size": grid_size,
                    "width": width,
                    "height": height,
                    "negative_prompt": negative_prompt,
                },
                headers={"api-key": DEEP_AI_API_KEY},
        ) as response:
            if response.status == 200:
                json_response = await response.json()
                image_url = json_response["output_url"]

                async with session.get(image_url) as image_response:
                    if image_response.status == 200:
                        image_data = BytesIO(await image_response.read())
                        image_data.name = "generated_image.png"
                        return image_data
                    else:
                        print(f"Error getting image: {image_response.status}")
            else:
                print(f"Error generating image: {response.status}")

    return None


dp.register_message_handler(generate_image_command, commands=['generate_image'])









@dp.callback_query_handler(text="subchanneldone")
async def subchanneldone(call: types.CallbackQuery):
    await bot.delete_message(call.from_user.id, call.message.message_id)
    if check_sub_channel(await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=call.from_user.id)):
        await bot.send_message(call.from_user.id,
                               text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —á–∞—Ç —Å –±–æ—Ç–æ–º GPT 3.5 Turbo! –Ø –æ—á–µ–Ω—å —Ä–∞–¥ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –≤–∞—Å –∑–¥–µ—Å—å –∏ –ø–æ–º–æ—á—å –≤–∞–º –≤ –ª—é–±—ã—Ö –≤–æ–ø—Ä–æ—Å–∞—Ö –∏ –∑–∞–¥–∞—á–∞—Ö.",
                               reply_markup=nav.profileKeyboard)
    else:
        await bot.send_message(call.from_user.id, NOTSUB_MESSAGE, reply_markup=nav.checkSubMenu)







# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —Å–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π
user_message_histories = {}
# –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ö—Ä–∞–Ω—è—â–∏—Ö—Å—è —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
max_messages_per_user = 50


async def ai(prompt, user_id):
    try:
        if user_id not in user_message_histories:
            user_message_histories[user_id] = [
                {"role": "system", "content": '–¢–µ–±—è –∑–æ–≤—É—Ç OpenAiBot –∏ —Ç—ã –ª—É—á—à–∏–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—à–Ω–∏–∫!'}]

        user_message_histories[user_id].append({"role": "user", "content": prompt})

        # –£–¥–∞–ª–µ–Ω–∏–µ —Å—Ç–∞—Ä—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π, –µ—Å–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–µ–≤—ã—à–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        if len(user_message_histories[user_id]) > max_messages_per_user:
            user_message_histories[user_id].pop(1)
            user_message_histories[user_id].pop(1)

        completion = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=user_message_histories[user_id]
        )

        bot_response = completion.choices[0].message.content
        bot_response = escape(bot_response)
        user_message_histories[user_id].append({"role": "assistant", "content": bot_response})

        return bot_response
    except Exception as e:
        logging.error(f"Error in ai function: {e}")
        restart_bot()

def restart_bot():
    logging.info("Restarting bot in 5 seconds...")
    time.sleep(5)
    python = sys.executable
    os.execl(python, python, *sys.argv)

@dp.message_handler(content_types=types.ContentTypes.TEXT)
async def echo(message: types.Message):
    # Get the user's message
    user_message = message.text

    # Use the ai function to generate a response
    ai_message = await ai(user_message, message.chat.id)

    # Send the AI's message to the user
    if ai_message:
        await bot.send_message(chat_id=message.chat.id, text=ai_message)


async def main():
    while True:
        try:
            await dp.start_polling()
        except Exception as e:
            logging.error(f"Error occurred: {e}")
            logging.info("Restarting bot in 5 seconds...")
            time.sleep(5)
            python = sys.executable
            os.execl(python, python, *sys.argv)

def run_schedule():
    while True:
        schedule.run_pending()
        time.sleep(1)

if __name__ == '__main__':
    while True:
        try:
            asyncio.run(main())
        except Exception as e:
            logging.error(f"Error occurred: {e}")
            logging.info("Restarting bot in 5 seconds...")
            time.sleep(5)
            python = sys.executable
            os.execl(python, python, *sys.argv)
        run_schedule()